package smartanalytics.diksha.com.smartanalytics.fragment;


import android.content.Intent;
import android.graphics.Color;
import android.graphics.Paint;
import android.os.Bundle;
import android.provider.ContactsContract;
import android.support.v4.app.Fragment;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;

import com.squareup.otto.Subscribe;

import org.achartengine.ChartFactory;
import org.achartengine.GraphicalView;
import org.achartengine.chart.BarChart;
import org.achartengine.model.XYMultipleSeriesDataset;
import org.achartengine.model.XYSeries;
import org.achartengine.renderer.XYMultipleSeriesRenderer;
import org.achartengine.renderer.XYSeriesRenderer;

import java.util.ArrayList;

import smartanalytics.diksha.com.smartanalytics.R;
import smartanalytics.diksha.com.smartanalytics.commonutils.CommonUtility;
import smartanalytics.diksha.com.smartanalytics.commonutils.LogUtils;
import smartanalytics.diksha.com.smartanalytics.core.SmartAppication;
import smartanalytics.diksha.com.smartanalytics.data.BillHistoryData;
import smartanalytics.diksha.com.smartanalytics.network.OttoEvent;

/**
 * A simple {@link Fragment} subclass.
 */
public class BillHistoryFragment extends BaseFragment {

    public String TAG = BillHistoryFragment.class.getSimpleName();

    public BillHistoryFragment() {
        // Required empty public constructor
    }

    private LinearLayout rel;
    private GraphicalView mChartView;


    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        // Inflate the layout for this fragment
        View v = inflater.inflate(R.layout.fragment_bill_history, container, false);
        rel = v.findViewById(R.id.chart);
        return v;
    }

    private void populateChart(BillHistoryData billHistoryDataArrayList) {
        int[] income = billHistoryDataArrayList.getBillAmount();
        String[] mMonth = billHistoryDataArrayList.getBillMonth();
        if (income.length > 0 && mMonth.length > 0) {
            // Creating an  XYSeries for Income
            XYSeries xyseries = new XYSeries("Month");
            for (int i = 0; i < income.length; i++) {
                xyseries.add(i, income[i]);
            }
            // Creating a dataset to hold each series
            XYMultipleSeriesDataset dataset = new XYMultipleSeriesDataset();
            // Adding Income Series to the dataset
            dataset.addSeries(xyseries);
            // Creating XYSeriesRenderer to customize incomeSeries
            XYSeriesRenderer billHistoryRenderer = new XYSeriesRenderer();
            billHistoryRenderer.setColor(getResources().getColor(R.color.diksha_orange));
            billHistoryRenderer.setFillPoints(true);
            billHistoryRenderer.setLineWidth(2);
            billHistoryRenderer.setDisplayChartValues(true);

            // Creating a XYMultipleSeriesRenderer to customize the whole chart
            XYMultipleSeriesRenderer multiRenderer = new XYMultipleSeriesRenderer();
            for (int i = 0; i < income.length; i++) {
                multiRenderer.addXTextLabel(i, mMonth[i]);
            }
            multiRenderer.setShowGrid(true);
            multiRenderer.setXLabels(0);
            multiRenderer.setBarSpacing(0.5);
            multiRenderer.setFitLegend(true);
            multiRenderer.setBarWidth(40);
            multiRenderer.setMarginsColor(getResources().getColor(R.color.diksha_white));
            //multiRenderer.setChartTitle("Income vs Expense Chart");
            multiRenderer.setAxisTitleTextSize(16);
            multiRenderer.setYLabelsColor(0, Color.BLACK);
            multiRenderer.setXLabelsColor(Color.BLACK);
            multiRenderer.setLabelsColor(Color.BLACK);
            // multiRenderer.setBarWidth(3);
            multiRenderer.setAxesColor(Color.BLACK);
            multiRenderer.setYAxisAlign(Paint.Align.LEFT, 0);
            multiRenderer.setYLabelsAlign(Paint.Align.RIGHT, 0);
            multiRenderer.setXAxisMin(-0.5);
            multiRenderer.setXAxisMax(6);
            multiRenderer.setYTitle("Amount(Rs.)");
            multiRenderer.setZoomButtonsVisible(true);
            multiRenderer.setMargins(new int[]{30, 30, 10, 30});

            multiRenderer.addSeriesRenderer(billHistoryRenderer);
            mChartView = ChartFactory.getBarChartView(getActivity(), dataset,
                    multiRenderer, BarChart.Type.DEFAULT);
            rel.addView(mChartView);
            mChartView.repaint();
        } else {
            rel.removeAllViews();
            CommonUtility.displayToast(getActivity(), getResources().getString(R.string.no_data_found));
        }

    }

    @Override
    protected <T> void onResponse(T t, int id) throws Exception {
        LogUtils.logD(TAG, t.toString());
    }

    @Subscribe
    public void onOttoEventReceived(OttoEvent event) {
       // LogUtils.logD(TAG, "DashboardAccountsFragment");

        try {
            super.onOttoEventReceived(event);

        } catch (Exception e) {
            LogUtils.logD(TAG, "Exception --> " + e.getMessage());
        }

    }

    public void setBillHistory(String mAccountNo) {
        BillHistoryData billHistoryDataArrayList = SmartAppication.getInstance().getmDatabaseHelper().
                getBillHistoryByAccountno(mAccountNo);
        populateChart(billHistoryDataArrayList);

    }
}
